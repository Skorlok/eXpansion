declare Window <=> Page.GetFirstChild("<?php echo $win->getId() ?>");
// set hidden to reduce flicker
declare MoveWindow = False;
declare CMlQuad quad <=> (Page.GetFirstChild("enableMove") as CMlQuad);

//declare CMlLabel coordLabel <=> (Page.GetFirstChild("coordLabel") as CMlLabel);
//declare CMlLabel coordButton <=> (Page.GetFirstChild("coordButton") as CMlLabel);
//declare CMlEntry coordInput <=> (Page.GetFirstChild("coordinates") as CMlEntry);

declare Vec3 LastDelta = <Window.RelativePosition.X, Window.RelativePosition.Y, -3.0>;
declare Vec3 DeltaPos = <0.0, 0.0, -3.0>;
declare Real lastMouseX = 0.0;
declare Real lastMouseY = 0.0;
declare CMlControl element;

declare Boolean exp_needToCheckPersistentVars for UI = False;
declare Integer exp_multipleCheckCount = 0;

declare Boolean exp_enableHudMove for UI = False;
exp_enableHudMove = False;

declare persistent Vec3[Text][Text][Text] eXp_widgetLastPos = Vec3[Text][Text][Text];
declare persistent Vec3[Text][Text][Text] eXp_widgetLastPosRel =  Vec3[Text][Text][Text];	
declare persistent Boolean[Text][Text][Text] eXp_widgetVisible = Boolean[Text][Text][Text];
declare Boolean exp_widgetVisibleBuffered;

declare persistent Text[Text][Text][Text] eXp_widgetLayers = Text[Text][Text][Text];  // layer can be "normal" or "scorestable" or some other for future usage
declare Text exp_widgetLayersBuffered;  

declare Text version = "<?php echo $this->version ?>";
declare Text id = "<?php echo $this->name ?>";
declare Text gameMode = "<?php echo $this->gameMode; ?>";
declare Boolean forceReset = <?php echo $this->forceReset ?>;
declare Text activeLayer = "<?php echo $win->getLayer(); ?>";
declare Text visibleLayerInit = "<?php echo $this->visibleLayerInit; ?>";
declare Boolean disablePersonalHud = <?php echo $this->disablePersonalHud; ?>;

declare Boolean exp_widgetCurrentVisible = False;
declare Boolean exp_widgetVisibilityChanged = False;
declare Integer eXp_lastWidgetCheck = 0;
declare Boolean eXp_firstPersistentCheckDone = False;

if (!eXp_widgetVisible.existskey(version) ) {
	eXp_widgetVisible[version] = Boolean[Text][Text];
}

if ( !eXp_widgetVisible[version].existskey(id) || forceReset) {
	eXp_widgetVisible[version][id] = Boolean[Text];
}

if ( !eXp_widgetVisible[version][id].existskey(gameMode) ) {
	eXp_widgetVisible[version][id][gameMode] = <?php echo $win->getWidgetVisible(); ?>;
}

if (!eXp_widgetLayers.existskey(version) ) {
	eXp_widgetLayers[version] = Text[Text][Text];
}

if (!eXp_widgetLayers[version].existskey(id) || forceReset) { 
	eXp_widgetLayers[version][id] = Text[Text];
}

if (!eXp_widgetLayers[version][id].existskey(gameMode)) { 
	eXp_widgetLayers[version][id][gameMode] = activeLayer; 
}

if (!eXp_widgetLastPosRel.existskey(version)) {
	eXp_widgetLastPosRel[version] = Vec3[Text][Text];
} 

if (!eXp_widgetLastPosRel[version].existskey(id) || forceReset) {
    eXp_widgetLastPosRel[version][id] = Vec3[Text];
}

if (!eXp_widgetLastPosRel[version][id].existskey(gameMode)) {
	eXp_widgetLastPosRel[version][id][gameMode] = < <?php echo $this->getNumber($win->getPosX()) ?>, <?php echo $this->getNumber($win->getPosY()) ?>, -3.0>;
}

if(!disablePersonalHud){
    LastDelta = eXp_widgetLastPosRel[version][id][gameMode];
    Window.RelativePosition = eXp_widgetLastPosRel[version][id][gameMode];

    exp_widgetCurrentVisible = eXp_widgetVisible[version][id][gameMode];
    exp_widgetVisibleBuffered = eXp_widgetVisible[version][id][gameMode];
    exp_widgetLayersBuffered = eXp_widgetLayers[version][id][gameMode];
    
    // reduce flickering on normal layer, when widget update.
    if(!eXp_widgetVisible[version][id][gameMode] || eXp_widgetLayers[version][id][gameMode] != activeLayer) {
	    Window.Hide();
	    exp_widgetCurrentVisible = False;
    }
    
    if (exp_enableHudMove == True) {
	    quad.Show();
    }else {
	    quad.Hide();
    }
} else {
    exp_widgetLayersBuffered = visibleLayerInit;
    exp_widgetCurrentVisible = True;
    exp_widgetVisibleBuffered = True;
    if(visibleLayerInit != activeLayer) {
	Window.Hide();
	exp_widgetCurrentVisible = False;
	exp_widgetVisibleBuffered = False;
    }
    quad.Hide();
}