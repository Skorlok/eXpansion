// KEEP THIS, IT WILL REMOVE OLD DATA

declare persistent Vec3[Text][Text][Text] eXp_widgetLastPos;
eXp_widgetLastPos.clear();

declare persistent Vec3[Text][Text][Text] eXp_widgetLastPosRel;
eXp_widgetLastPosRel.clear();

declare persistent Boolean[Text][Text][Text] eXp_widgetVisible;
eXp_widgetVisible.clear();

declare persistent Text[Text][Text][Text] eXp_widgetLayers;
eXp_widgetLayers.clear();


declare persistent Vec3[Text][Text] exp_windowLastPos;
exp_windowLastPos.clear();

declare persistent Vec3[Text][Text] exp_windowLastPosRel;
exp_windowLastPosRel.clear();

// KEEP THIS, IT WILL REMOVE OLD DATA


declare Window <=> Page.GetFirstChild("<?php echo $win->getId() ?>");
// set hidden to reduce flicker
declare MoveWindow = False;
declare CMlQuad quad <=> (Page.GetFirstChild("enableMove") as CMlQuad);

declare Vec3 LastDelta = <Window.RelativePosition.X, Window.RelativePosition.Y, -3.0>;
declare Vec3 DeltaPos = <0.0, 0.0, -3.0>;
declare Real lastMouseX = 0.0;
declare Real lastMouseY = 0.0;
declare CMlControl element;

declare Boolean exp_needToCheckPersistentVars for UI = False;
declare Integer exp_multipleCheckCount = 0;

declare Boolean exp_enableHudMove for UI = False;

declare persistent Vec3[Text][Text] EXP_widgetLastPos = Vec3[Text][Text];
declare persistent Vec3[Text][Text] EXP_widgetLastPosRel =  Vec3[Text][Text];	
declare persistent Boolean[Text][Text] EXP_widgetVisible = Boolean[Text][Text];
declare Boolean exp_widgetVisibleBuffered;

declare persistent Text[Text][Text] EXP_widgetLayers = Text[Text][Text];  // layer can be "normal" or "scorestable" or some other for future usage
declare Text exp_widgetLayersBuffered;  

declare Text id = "<?php echo $this->name ?>";
declare Text gameMode = "<?php echo $this->gameMode; ?>";
declare Boolean forceReset = <?php echo $this->forceReset ?>;
declare Text activeLayer = "<?php echo $win->getLayer(); ?>";
declare Text visibleLayerInit = "<?php echo $this->visibleLayerInit; ?>";
declare Boolean disablePersonalHud = <?php echo $this->disablePersonalHud; ?>;

declare Boolean exp_widgetCurrentVisible = False;
declare Boolean exp_widgetVisibilityChanged = False;
declare Integer eXp_lastWidgetCheck = 0;
declare Boolean eXp_firstPersistentCheckDone = False;

if (!EXP_widgetVisible.existskey(id) || forceReset) {
	EXP_widgetVisible[id] = Boolean[Text];
}

if (!EXP_widgetVisible[id].existskey(gameMode) ) {
	EXP_widgetVisible[id][gameMode] = <?php echo $win->getWidgetVisible(); ?>;
}

if (!EXP_widgetLayers.existskey(id) || forceReset) { 
	EXP_widgetLayers[id] = Text[Text];
}

if (!EXP_widgetLayers[id].existskey(gameMode)) { 
	EXP_widgetLayers[id][gameMode] = activeLayer; 
}

if (!EXP_widgetLastPosRel.existskey(id) || forceReset) {
    EXP_widgetLastPosRel[id] = Vec3[Text];
}

if (!EXP_widgetLastPosRel[id].existskey(gameMode)) {
	EXP_widgetLastPosRel[id][gameMode] = < <?php echo $this->getNumber($win->getPosX()) ?>, <?php echo $this->getNumber($win->getPosY()) ?>, -3.0>;
}

if (!disablePersonalHud) {
    LastDelta = EXP_widgetLastPosRel[id][gameMode];
    Window.RelativePosition = EXP_widgetLastPosRel[id][gameMode];

    exp_widgetCurrentVisible = EXP_widgetVisible[id][gameMode];
    exp_widgetVisibleBuffered = EXP_widgetVisible[id][gameMode];
    exp_widgetLayersBuffered = EXP_widgetLayers[id][gameMode];
    
    // reduce flickering on normal layer, when widget update.
    if (!EXP_widgetVisible[id][gameMode] || EXP_widgetLayers[id][gameMode] != activeLayer) {
	    Window.Hide();
	    exp_widgetCurrentVisible = False;
    }
    
    if (exp_enableHudMove == True) {
	    quad.Show();
    } else {
	    quad.Hide();
    }
} else {
    exp_widgetLayersBuffered = visibleLayerInit;
    exp_widgetCurrentVisible = True;
    exp_widgetVisibleBuffered = True;
    if (visibleLayerInit != activeLayer) {
        Window.Hide();
        exp_widgetCurrentVisible = False;
        exp_widgetVisibleBuffered = False;
    }
    quad.Hide();
}
