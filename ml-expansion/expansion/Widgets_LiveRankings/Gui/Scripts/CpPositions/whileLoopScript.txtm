
foreach (Player in Players) {

    declare <?php echo $this->varName ?> for Player = -1;

    if (<?php echo $this->varName ?> != Player.CurRace.Checkpoints.count) {
		//Update the current checkpoint of this user
		declare curCp = Player.CurRace.Checkpoints.count -1 ;
		<?php echo $this->varName ?> = curCp+1;


		//Check if valid checkpoint
		if(curCp >= 0){
			if((curCp+1) == totalCp*nbLaps && givePoints){
			nbFinish += 1;
			}
			needUpdate = True;
			//Check if max Checkpoint
			if(maxCp <= curCp){
			maxCp = curCp+1;
			}

			declare <?php echo $this->varName ?>_cpPosition for Player = -1;
			declare newCpPosition = 0;

			playersTeam[Player.Login] = Player.RequestedClan;

			//Register Checkpoint time
			if(!playerTimes.existskey(curCp)){
				//Is it first player throught this checkpoint?
				playerTimes[curCp] = Integer[Text];
				bestCps[curCp] = Player.CurRace.Checkpoints[curCp];
			}else{
				if(bestCps[curCp] > Player.CurRace.Checkpoints[curCp]){
					bestCps[curCp] = Player.CurRace.Checkpoints[curCp];
				}
			}
			playerTimes[curCp][Player.Login] = Player.CurRace.Checkpoints[curCp];
			playerNickNames[Player.Login] = TextExt_StripLinks(Player.Name);

			updatedPlayers[Player.Login] = True;
			//Remove from older checkpoint
			if(curCp > 0){
				if(playerTimes.existskey(curCp-1)){
					playerTimes[curCp-1].removekey(Player.Login);
				}
			}
		}
    }
}

//Get player being spectated if possible
if (GUIPlayer != Null) {
    currentPlayerName = GUIPlayer.Login;
} else {
    currentPlayerName = LocalUser.Login;
}

//Refresh Widget if spectating player has changed
if (currentPlayerName != prevPlayerName){
    prevPlayerName = currentPlayerName;
    needUpdate = True;
}

if(!needUpdate){
    lastUpdateTime = Now;
}

if (needUpdate && (((Now - lastUpdateTime) > 500 && exp_widgetVisibleBuffered && exp_widgetLayersBuffered == activeLayer) || exp_widgetVisibilityChanged)) {
    lastUpdateTime = Now;

    needUpdate = False;

    declare i = 1;
    declare nbRec = 1;
    declare showed = False;

    declare myRank = -1;
    declare start = -1;
    declare end = -1;
    declare recCount = -1;

    i = 1;

    declare cpIndex = maxCp -1;
    while(cpIndex >= 0){
		if(playerTimes.existskey(cpIndex)){
			playerTimes[cpIndex] = playerTimes[cpIndex].sort();
			declare Players2 = playerTimes[cpIndex];
			foreach(p => Score in Players2){
				if (LocalUser != Null) {
					if (p == currentPlayerName) {
						myRank = i;
					}
				}
				i += 1;
				if(myRank != -1 && i > myRank + (nbFields - nbFirstFields)){
					break;
				}
			}
			if(myRank != -1 && i > myRank + (nbFields - nbFirstFields)){
				break;
			}
		}
		cpIndex -= 1;
    }
    recCount = i;

    if(LocalUser.RequestsSpectate && givePoints){
		myRank = nbFinish;
    }

    if (myRank != -1) {
		start = myRank - ((nbFields - nbFirstFields) / 2);

		if (start <= nbFirstFields) {
			start = nbFirstFields;
			end = start + (nbFields - nbFirstFields);
		} else {
			end = start + (nbFields - nbFirstFields);
			if (end > recCount) {
				end = recCount;
				start = end - (nbFields - nbFirstFields);
			}
		}
    } else {
		start = nbFirstFields;
		end = start + (nbFields - nbFirstFields);
    }

    i = 1;
    nbRec = 1;
    declare firstOfCp = True;
    cpIndex = maxCp -1;

    declare teamRedScore = 0;
    declare teamBlueScore = 0;
    declare total = recCount;
    if(total > maxPoint){
		total = maxPoint;
    }

    playerScoreRanks.clear();
    while(cpIndex >= 0){
		declare bestCp = 0;
		if(playerTimes.existskey(cpIndex)){
			declare Players2 = playerTimes[cpIndex];
			foreach(p => Score in Players2){
			if ((nbRec <= nbFirstFields || (nbRec > start && nbRec <= end) ) && i <= nbFields) {

				declare nickLabel = (Page.GetFirstChild("RecNick_"^i) as CMlLabel);
				declare timeLabel = (Page.GetFirstChild("RecTime_"^i) as CMlLabel);
				declare highliteQuad = (Page.GetFirstChild("RecBg_"^i) as CMlQuad);
				declare rank = (Page.GetFirstChild("RecRank_"^i) as CMlLabel);
                                playerScoreRanks.add(p);

				if (p == currentPlayerName) {
				    showed = True;
				}

                if(playerNickNames.existskey(p)){
				    nickLabel.SetText(playerNickNames[p]);
                } else {
                    nickLabel.SetText(p);
                }

				if(isTeam){
					if(playersTeam[p] == 1){
						timeLabel.SetText(team1Color^TimeToText(Score));
						rank.SetText(team1Color^nbRec);
						if((cpIndex+1) == totalCp*nbLaps){
							if(points.existskey(nbRec-1)){
								teamBlueScore += points[nbRec-1];
							}
						}
					}else{
						timeLabel.SetText(team2Color^TimeToText(Score));
						rank.SetText(team2Color^nbRec);
						if((cpIndex+1) == totalCp*nbLaps){
							if(points.existskey(nbRec-1)){
								teamRedScore += points[nbRec-1];
							}
						}
					}
				}else{
					timeLabel.SetText(TimeToText(Score));
					rank.SetText(""^nbRec);
				}

				declare labelInfo1 = (Page.GetFirstChild("RecInfo1_"^i) as CMlLabel);
				declare labelInfo2 = (Page.GetFirstChild("RecInfo2_"^i) as CMlLabel);

				if(nbRec == 1){
					labelInfo1.SetText("   -"^"-:"^"-"^"-"^"."^"-"^"-"^"-");
					labelInfo2.SetText("   -"^"-:"^"-"^"-"^"."^"-"^"-"^"-");
				}else{
					declare diff = Score - bestCps[cpIndex];

					if(!lastTimeDiff.existskey(p)){
						lastTimeDiff[p] = 0;
					}

					/*if(lastTimeDiff[p] > diff){
						labelInfo1.SetText("$F00+"^TimeToText(Score - bestCps[cpIndex]));
						labelInfo2.SetText("$F00+"^TimeToText(Score - bestCps[cpIndex]));
					}else if(lastTimeDiff[p] < diff){
						labelInfo1.SetText("$0F0+"^TimeToText(Score - bestCps[cpIndex]));
						labelInfo2.SetText("$0F0+"^TimeToText(Score - bestCps[cpIndex]));
					}else{*/
						labelInfo1.SetText("+"^TimeToText(Score - bestCps[cpIndex]));
						labelInfo2.SetText("+"^TimeToText(Score - bestCps[cpIndex]));
					/*}
					if(updatedPlayers.existskey(p)){
						lastTimeDiff[p] = diff;
					}*/
				}



				declare labelCp1 = (Page.GetFirstChild("RecCp1_"^i) as CMlLabel);
				declare labelCp2 = (Page.GetFirstChild("RecCp2_"^i) as CMlLabel);

				if((cpIndex+1) == totalCp*nbLaps && givePoints){
					if(points.existskey(nbRec-1)){
						labelCp1.SetText("$2A2"^points[nbRec-1]^" pts");
						labelCp2.SetText("$2A2"^points[nbRec-1]^" pts");
					}else{
						labelCp1.SetText("$2A20P");
						labelCp2.SetText("$2A20P");
					}
				}else{
					if(nbRec == 1){
						 declare lap = 0;
						 lap = cpIndex/totalCp;
						 if(lap > 0 && isLaps){
							labelCp1.SetText("Lap"^(lap+1));
							labelCp2.SetText("Lap"^(lap+1));
						 }else{
							labelCp1.SetText("Cp"^(cpIndex+1));
							labelCp2.SetText("Cp"^(cpIndex+1));
						 }
					}else{
						declare diff = maxCp - cpIndex - 1;
						if(diff > 0){
							labelCp1.SetText("+"^diff^" cp");
							labelCp2.SetText("+"^diff^" cp");
						}else{
							labelCp1.SetText("");
							labelCp2.SetText("");
						}
					}
				}

				declare bg = (Page.GetFirstChild("RecBgBlink_"^i) as CMlQuad);

				if(p == LocalUser.Login){
					highliteQuad.Hide();
					bg.Show();
				}else{
					bg.Hide();
				}


				i += 1;
			}
			bestCp = Score;
			nbRec += 1;
			firstOfCp = False;
			}
			firstOfCp = True;
		}
		cpIndex -= 1;
    }

    if(isTeam){
		declare blueLabel = (Page.GetFirstChild("bluePoints") as CMlLabel);
		blueLabel.SetText(""^teamBlueScore);

		declare redLabel = (Page.GetFirstChild("redPoints") as CMlLabel);
		redLabel.SetText(""^teamRedScore);
    }

	updatedPlayers = Boolean[Text];
}

foreach (Event in PendingEvents) {
     if (Event.Type == CMlEvent::Type::MouseClick ) {
        declare CMlControl control = Page.GetFirstChild(Event.ControlId);
        if (control.ControlClasses.count > 0 && control.ControlClasses[0] == "nickLabel") {
                //log("nicklabel:" ^ Event.ControlId);
                declare controlId = TextLib::Split("_",Event.ControlId);
                declare Integer index = TextLib::ToInteger(controlId[1])-1;
                SetSpectateTarget(playerScoreRanks[index]);
                //log("spectator" ^ playerScoreRanks[index]);
        }
    }

    if (Event.Type == CMlEvent::Type::MouseClick && Event.ControlId == "setLayer") {
		if (EXP_widgetLayers[id][gameMode] == "normal") {
			EXP_widgetLayers[id][gameMode] = "scorestable";
			exp_needToCheckPersistentVars = True;
		} else {
			EXP_widgetLayers[id][gameMode] = "normal";
			exp_needToCheckPersistentVars = True;
		}
    }
}