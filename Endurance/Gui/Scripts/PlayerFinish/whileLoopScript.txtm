if (isZoom) {
    if (zoomId != -1) {
        declare rank = (Page.GetFirstChild("RecRank_"^zoomId) as CMlLabel);
        declare nickLabel = (Page.GetFirstChild("RecNick_"^zoomId) as CMlLabel);
        declare timeLabel = (Page.GetFirstChild("RecTime_"^zoomId) as CMlLabel);
        timeLabel.RelativeScale = 1.;
        nickLabel.RelativeScale = 1.;
        rank.RelativeScale = 1.;
    }
}

if (edge_showDiff != old_showDiff) {
    old_showDiff = edge_showDiff;
    needUpdate = True;
}

if (isZoom && animStart + 2000 <= Now ) {
    isZoom = False;
}

if  ((Now - lastUpdateTime) >= 500) {
    //Updating currently connected players
    playersOnServer.clear();
    foreach (Player in Players) {
        playersOnServer[Player.Login] = Player.Name;

        if(!playerNickName.existskey(Player.Login)){
            playerNickName[Player.Login] = Player.Name;
        }
        needUpdate = True;
    }
}

if (needUpdate && ((exp_widgetVisibleBuffered && exp_widgetLayersBuffered == activeLayer) || exp_widgetVisibilityChanged)) {
    lastUpdateTime = Now;

    needUpdate = False;
    declare Integer inRank = 1;
    declare Boolean isNewRecord = False;

    declare i = 1;
    declare nbRec = 1;
    declare showed = False;

    declare myRank = -1;
    declare start = -1;
    declare end = -1;
    declare recCount = -1;

    if (playerTimes.count > nbShow) {
	    recCount = nbShow;
    } else {
	    recCount = playerTimes.count;
    }

    i = 1;

    foreach (Login => Score in playerTimes) {
        if (LocalUser != Null) {
            if (Login == LocalUser.Login) {
                myRank = i;
                break;
            }
        }
        i += 1;
    }

    if (myRank != -1) {
        start = myRank - ((nbFields - nbFirstFields) / 2);

        if (start <= nbFirstFields) {
            start = nbFirstFields;
            end = start + (nbFields - nbFirstFields);
        } else {
            end = start + (nbFields - nbFirstFields);
            if (end > recCount) {
                end = recCount;
                start = end - (nbFields - nbFirstFields);
            }
        }
    } else {
        start = recCount  - (nbFields - nbFirstFields);
        end = start + (nbFields - nbFirstFields);
    }

    i = 1;
    nbRec = 1;
    zoomId = -1;
    declare scoreFirst = -1;

    foreach (Login => Score in playerTimes) {

        if (scoreFirst == -1) {
            scoreFirst = Score;
        }

        if ((nbRec <= nbFirstFields || (nbRec > start && nbRec <= end) ) && nbRec <= nbShow && i <= nbFields) {

            declare nickLabel = (Page.GetFirstChild("RecNick_"^i) as CMlLabel);
            declare timeLabel = (Page.GetFirstChild("RecTime_"^i) as CMlLabel);
            declare highliteQuad = (Page.GetFirstChild("RecBg_"^i) as CMlQuad);

            if (nickLabel != Null) {
                declare outScore = Score;
                if (edge_showDiff) {
                    if (i > 1) {
                        outScore = Score - scoreFirst;
                    }
                }
                putRecordTo(i, nbRec, outScore, Login, playerNickName[Login], Login == LocalUser.Login);
                if (highliteQuad != Null) {
                    if (playersOnServer.existskey(Login) && i != myRank) {
                        highliteQuad.Show();
                    } else {
                        highliteQuad.Hide();
                    }
                }
                if (Login == LocalUser.Login) {
                    showed = True;
                    zoomId = i;
                    if (lastZoomId != zoomId) {
                        isZoom = True;
                        animStart = Now;
                        lastZoomId = zoomId;
                    }
                }
            }
            i += 1;
        }
        nbRec += 1;
    }

}

foreach (Event in PendingEvents) {
    if (Event.Type == CMlEvent::Type::MouseClick && Event.ControlId == "setLayer") {
        if (eXp_widgetLayers[version][id][gameMode] == "normal") {
            eXp_widgetLayers[version][id][gameMode] = "scorestable";
            exp_needToCheckPersistentVars = True;
        } else {
            eXp_widgetLayers[version][id][gameMode] = "normal";
            exp_needToCheckPersistentVars = True;

        }
    }
}